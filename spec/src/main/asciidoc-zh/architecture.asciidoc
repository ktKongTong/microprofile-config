//
// Copyright (c) 2016-2017 Eclipse Microprofile Contributors:
// Mark Struberg
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[architecture]]
// == Architecture
//
// This specification defines an easy to use and flexible system for application configuration.
// It also defines ways to extend the configuration mechanism itself via a SPI (Service Provider Interface) in a portable fashion.

== 架构

本规范定义了一个灵活易用的应用程序配置系统。
它还定义了以可移植方式通过SPI（Service Provider Interface 服务提供者接口）扩展配置机制本身的方法。

// === Rationale
//
// Released binaries often contain functionality which needs to behave slightly differently depending on the deployment.
// This might be the port numbers and URLs of REST endpoints to talk to (e.g. depending on the customer for whom a WAR is deployed).
// Or it might even be whole features which need to be switched on and off depending on the installation.
// All this must be possible without the need to re-package the whole application binary.

=== 基本原理

发布的二进制文件通常包含需要根据部署情况稍微不同的功能。
这可能是要与之通信的 REST 端点的端口号和 URL（例如，取决于为谁部署的 WAR）。
甚至可能是需要根据安装情况打开和关闭的整个功能。
所有这些都必须在不需要重新打包整个应用程序二进制文件的情况下完成。


// MicroProfile Config provides a way to achieve this goal by aggregating configuration from many different <<configsource,ConfigSources>> and presents a single merged view to the user.
// This allows the application to bundle default configuration within the application.
// It also allows to override the defaults from outside or erase the property by simply specifying the property name without providing a value or an empty string as the value,
// e.g. via an environment variable a Java system property or via a container like Docker.
// MicroProfile Config also allows to implement and register own configuration sources in a portable way, e.g. for reading configuration values from a shared database in an application cluster.

MicroProfile Config 提供了一种方法来实现此目标，即从许多不同的 <<configsource,配置源>> 聚合配置，并向用户提供单个合并视图。
这允许应用程序在应用程序中捆绑默认配置。
它还允许从外部覆盖默认值，或者通过简单地指定属性名称而不提供值或空字符串作为值来擦除属性，例如通过环境变量Java系统属性或通过Docker等容器。
MicroProfile Config还允许以可移植的方式实现和注册自己的配置源，例如从应用程序集群中的共享数据库中读取配置值。



// Internally, the core MicroProfile Config mechanism is purely String/String based.
// Type-safety is intentionally only provided on top of that by using the proper <<converters,Converters>> before handing the value out to the caller.
//
// The configuration key might use dot-separated blocks to prevent name conflicts. This is similar to Java package namespacing:

在 MicroProfile Config 内部，其核心机制纯粹是基于 String/String 的。
类型安全性是通过在将值交给调用者之前使用适当的 <<converters,转换器>> 来有意地提供的。

配置键可能使用点分隔的块来防止名称冲突。这与 Java 包命名空间类似：

[source, text]
----
com.acme.myproject.someserver.url = http://some.server/some/endpoint
com.acme.myproject.someserver.port = 9085
com.acme.myproject.someserver.active = true
com.acme.other.stuff.name = Karl
com.acme.myproject.notify.onerror=karl@mycompany,sue@mcompany
some.library.own.config=some value
----


// TIP: while the above example is in the java property file syntax the actual content could also e.g. be read from a database.
TIP：虽然上面的示例用的是 java 属性文件语法，但实际内容也可以从数据库中读取。
